targetNamespace "http://www.edna-site.org"

import XSDataCommon.XSData
import XSDataCommon.XSDataAngle
import XSDataCommon.XSDataBoolean
import XSDataCommon.XSDataDouble
import XSDataCommon.XSDataFile
import XSDataCommon.XSDataFloat
import XSDataCommon.XSDataInput
import XSDataCommon.XSDataInteger
import XSDataCommon.XSDataLength
import XSDataCommon.XSDataResult
import XSDataCommon.XSDataString
import XSDataCommon.XSDataVectorDouble
import XSDataCommon.XSDataWavelength
import XSDataCommon.XSDataRange

complex type XSDataCell {
	angle_alpha : XSDataAngle
	angle_beta : XSDataAngle
	angle_gamma : XSDataAngle
	length_a : XSDataLength
	length_b : XSDataLength
	length_c : XSDataLength
}

complex type XSDataMinimalXdsIn extends XSDataInput {
	input_file : XSDataString
	job : XSDataString optional
	maxproc : XSDataInteger optional
	maxjobs : XSDataInteger optional
	friedels_law : XSDataBoolean optional
	resolution_range : XSDataDouble [] optional
	spot_range : XSDataRange [] optional
	spacegroup : XSDataInteger optional
	unit_cell : XSDataString optional
	start_image : XSDataInteger optional
	end_image : XSDataInteger optional
	exclude_range : XSDataRange [] optional
	no_cores : XSDataInteger optional
}

complex type XSDataMinimalXdsOut extends XSDataResult {
	succeeded : XSDataBoolean
}

complex type XSDataXdsOutputFile extends XSDataInput {
	correct_lp : XSDataFile
	gxparm : XSDataFile optional
}

complex type XSDataXdsCompletenessEntry {
	res : XSDataDouble
	observed : XSDataDouble
	unique : XSDataDouble
	possible : XSDataDouble
	complete : XSDataDouble
	rfactor : XSDataDouble
	isig : XSDataDouble
	half_dataset_correlation : XSDataDouble
}

complex type XSData2DCoordinates {
	x : XSDataDouble
	y : XSDataDouble
}

complex type XSDataXdsOutput extends XSDataResult {
	completeness_entries : XSDataXdsCompletenessEntry []
	total_completeness : XSDataXdsCompletenessEntry
	crystal_mosaicity : XSDataDouble
	direct_beam_coordinates : XSDataVectorDouble
	direct_beam_detector_coordinates : XSData2DCoordinates
	detector_origin : XSData2DCoordinates
	crystal_to_detector_distance : XSDataDouble
	coordinates_of_unit_cell_a_axis : XSDataVectorDouble
	coordinates_of_unit_cell_b_axis : XSDataVectorDouble
	coordinates_of_unit_cell_c_axis : XSDataVectorDouble
	cell_a : XSDataDouble
	cell_b : XSDataDouble
	cell_c : XSDataDouble
	cell_alpha : XSDataDouble
	cell_beta : XSDataDouble
	cell_gamma : XSDataDouble
	unit_cell_constants : XSDataDouble [] optional
	sg_number : XSDataInteger optional
	/* the XDS run and the parsing are in separate plugins we
        cannot use getWorkingDirectory to find where XDS ran so we
        include that here. Yes, this is not pretty. */
	xds_run_directory : XSDataString
}

complex type XSDataResCutoff extends XSDataInput {
	xds_res : XSDataXdsOutput
	completeness_entries : XSDataXdsCompletenessEntry []
	detector_max_res : XSDataDouble optional
	//XXX : remove from model as it is only pass through?
	total_completeness : XSDataXdsCompletenessEntry
	res_override : XSDataDouble optional

	// the parameters we can use for cutoff
	completeness_cutoff : XSDataDouble optional
	isig_cutoff : XSDataDouble optional
	r_value_cutoff : XSDataDouble optional
	cc_half_cutoff : XSDataDouble optional
}

complex type XSDataResCutoffResult extends XSDataResult {
	res : XSDataDouble
	bins : XSDataDouble []
	//XXX : those 3 vars are only pass-through. Remove?
	total_complete : XSDataDouble
	total_rfactor : XSDataDouble
	total_isig : XSDataDouble
}

complex type XSDataXscaleInputFile extends XSDataInput {
// usually one of the path will be None depending on whether
// we're on the anom or noanom path
	path_anom : XSDataString optional
	path_noanom : XSDataString optional
	res : XSDataDouble
}

complex type XSDataXscaleGeneratedFiles extends XSDataResult {
	hkl_anom_merged : XSDataString
	lp_anom_merged : XSDataString
	stats_anom_merged : XSDataXscaleParsedOutput

	hkl_noanom_merged : XSDataString
	lp_noanom_merged : XSDataString
	stats_noanom_merged : XSDataXscaleParsedOutput

	hkl_anom_unmerged : XSDataString
	lp_anom_unmerged : XSDataString
	stats_anom_unmerged : XSDataXscaleParsedOutput

	hkl_noanom_unmerged : XSDataString
	lp_noanom_unmerged : XSDataString
	stats_noanom_unmerged : XSDataXscaleParsedOutput
}

complex type XSDataXscaleInput extends XSDataInput {
	merge : XSDataBoolean
	friedels_law : XSDataBoolean
	xds_files : XSDataXscaleInputFile []
	unit_cell_constants : XSDataDouble []
	sg_number : XSDataInteger
	bins : XSDataDouble [] optional
}

complex type XSDataXscaleOutput extends XSDataResult {
	succeeded : XSDataBoolean
	hkl_file : XSDataString optional
	lp_file : XSDataString optional
}

complex type XSDataXscaleParsingInput extends XSDataInput {
	lp_file : XSDataString
}

complex type XSDataXscaleCompletenessEntry extends XSDataXdsCompletenessEntry {
	multiplicity : XSDataDouble
}

complex type XSDataXscaleParsedOutput extends XSDataResult {
	total_completeness : XSDataXscaleCompletenessEntry
	completeness_entries : XSDataXscaleCompletenessEntry []
}

/* In the original pipeline XDS is simply rerun in the same dir since
edna insists on running each plugin into its separate directory we
will simply require where the previous run take place and link the
useful files from there. Yes, this is not pretty */
complex type XSDataXdsGenerateInput extends XSDataInput {
	previous_run_dir : XSDataString
	resolution : XSDataDouble
	spacegroup : XSDataInteger optional
	unit_cell : XSDataString optional
	doAnom : XSDataBoolean optional
	doNoanom : XSDataBoolean optional	
	exclude_range : XSDataRange [] optional
}

// we are only interested in that one file
complex type XSDataXdsGenerateOutput extends XSDataResult {
	hkl_anom : XSDataString
	hkl_no_anom : XSDataString
	correct_lp_anom : XSDataString
	correct_lp_no_anom : XSDataString
	integrate_anom : XSDataString
	integrate_noanom : XSDataString
	gxparm : XSDataString
}

complex type XSDataXDSFilePaths extends XSDataInput {
	xparmXds: XSDataFile optional	
	xCorrectionsCbf: XSDataFile optional	
	yCorrectionsCbf: XSDataFile optional	
	bkginitCbf : XSDataFile optional
	gainCbf : XSDataFile optional
	blankCbf : XSDataFile optional
}


complex type XSDataInputXDS extends XSDataInput {
	beam : XSDataXDSBeam
	crystal : XSDataXDSCrystal optional
	detector : XSDataXDSDetector
	goniostat : XSDataXDSGoniostat
	image : XSDataXDSImage
	image_link : XSDataXDSImageLink []
	filePaths : XSDataXDSFilePaths optional
}

complex type XSDataInputXDSGenerateBackgroundImage extends XSDataInputXDS {
}

complex type XSDataInputXDSIndexing extends XSDataInputXDS {
}

complex type XSDataInputXDSIntegration extends XSDataInputXDS {
}

complex type XSDataResultXDS extends XSDataResult {
	filePaths : XSDataXDSFilePaths optional
}

complex type XSDataResultXDSIndexing extends XSDataResultXDS {
	latticeCharacter : XSDataInteger optional
	bravaisLattice : XSDataString optional
	spaceGroup : XSDataString optional
	spaceGroupNumber : XSDataInteger optional
	qualityOfFit : XSDataFloat optional
	unitCell : XSDataXDSCell optional
	beamCentreX : XSDataFloat optional
	beamCentreY : XSDataFloat optional
	distance : XSDataLength optional
	mosaicity : XSDataAngle optional
	pathToLogFile : XSDataFile
}

complex type XSDataResultXDSIntegration extends XSDataResultXDS {
	correctLp : XSDataFile optional
	bkgpixCbf : XSDataFile optional
	xdsAsciiHkl : XSDataFile optional
}

complex type XSDataResultXDSGenerateBackgroundImage extends XSDataResultXDS {
	xdsBackgroundImage : XSDataFile
}

complex type XSDataXDSBeam extends XSData {
	fraction_of_polarization : XSDataDouble optional
	incident_beam_direction : XSDataVectorDouble
	polarization_plane_normal : XSDataVectorDouble
	x_ray_wavelength : XSDataWavelength
}

complex type XSDataXDSCell extends XSData {
	angle_alpha : XSDataAngle
	angle_beta : XSDataAngle
	length_a : XSDataLength
	length_b : XSDataLength
	length_c : XSDataLength
	angle_gamma : XSDataAngle
}

complex type XSDataXDSCrystal extends XSData {
	friedels_law : XSDataString
	space_group_number : XSDataInteger
	strong_pixel : XSDataInteger
	unit_cell_constants : XSDataXDSCell
	minimum_number_of_pixels_in_a_spot : XSDataInteger
}

complex type XSDataXDSDetector extends XSData {
	detector_distance : XSDataLength
	detector_name : XSDataString
	direction_of_detector_x_axis : XSDataVectorDouble
	direction_of_detector_y_axis : XSDataVectorDouble
	minimum_valid_pixel_value : XSDataInteger
	nx : XSDataInteger
	ny : XSDataInteger
	orgx : XSDataDouble
	orgy : XSDataDouble
	overload : XSDataInteger
	qx : XSDataLength
	qy : XSDataLength
	value_range_for_trusted_detector_pixels : XSDataXDSIntegerRange optional
	untrusted_rectangle : XSDataXDSRectangle [] optional
	sensor_thickness : XSDataDouble optional
	trusted_region : XSDataXDSDoubleRange optional
}

complex type XSDataXDSDoubleRange extends XSData {
	lower : XSDataDouble
	upper : XSDataDouble
}

complex type XSDataXDSGoniostat extends XSData {
	oscillation_range : XSDataAngle
	rotation_axis : XSDataVectorDouble
	starting_angle : XSDataAngle
}

complex type XSDataXDSImage extends XSData {
	background_range : XSDataXDSIntegerRange []
	data_range : XSDataXDSIntegerRange []
	spot_range : XSDataXDSIntegerRange []
	starting_frame : XSDataInteger
	name_template_of_data_frames : XSDataString
}

complex type XSDataXDSImageLink extends XSData {
	source : XSDataFile
	target : XSDataString
}

complex type XSDataXDSIntegerRange extends XSData {
	lower : XSDataInteger
	upper : XSDataInteger
}

complex type XSDataXDSRectangle extends XSData {
	x1 : XSDataInteger
	x2 : XSDataInteger
	y1 : XSDataInteger
	y2 : XSDataInteger
}

complex type XSDataXDSVector extends XSData {
	v1 : XSDataFloat
	v2 : XSDataFloat
	v3 : XSDataFloat
}